rules_version = '2';

service cloud.firestore {
  match /databases/{db}/documents {

    /* ---------- Helpers ---------- */
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    // Prevent field changes on update (allowed on create)
    function immut(field) {
      return !(field in resource.data) || request.resource.data[field] == resource.data[field];
    }

    /* =========================================================
       PUBLIC CATALOG (READ-ONLY VIA CLIENT)
       ========================================================= */
    // Courses are safe to expose: metadata only, no module content lives here.
    match /courses/{courseId} {
      allow read: if resource.data.published == true && resource.data.archived != true;
      allow write: if false; // All admin writes happen via server (Admin SDK)
    }

    // IMPORTANT: Do NOT expose modules directly (they contain content).
    // Public & user access to module metadata/content must go through API.
    match /courseModules/{moduleId} {
      allow read, write: if false;
    }

    /* =========================================================
       USER-OWNED DOCS
       ========================================================= */
    // Users can read/write their own profile. Prevent privilege escalation.
    match /users/{uid} {
      allow read, update: if isOwner(uid) && immut('role');  // can't change role client-side
      allow create: if isOwner(uid);                         // create own doc on first login
      allow delete: if false;
    }

    // Enrollments: owner only, core keys immutable.
    // Doc ID convention: `${uid}_${courseId}` (not enforced here).
    match /enrollments/{enrollmentId} {
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;

      allow read, update: if isSignedIn()
                        && resource.data.uid == request.auth.uid
                        && immut('uid') && immut('courseId');

      allow delete: if false;
    }

    // Progress: owner only, core keys immutable.
    // Doc ID: `${uid}_${courseId}_${moduleId}`.
    match /progress/{progressId} {
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;

      allow read, update: if isSignedIn()
                        && resource.data.uid == request.auth.uid
                        && immut('uid') && immut('courseId') && immut('moduleId');

      allow delete: if false;
    }

    // Questionnaire responses: owner only, core keys immutable.
    // Collection name (camelCase): questionnaireResponses
    // Doc ID: `${uid}_${assignmentId}`.
    match /questionnaireResponses/{responseId} {
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;

      allow read, update: if isSignedIn()
                        && resource.data.uid == request.auth.uid
                        && immut('uid') && immut('assignmentId') && immut('questionnaireId');

      allow delete: if false;
    }

    /* =========================================================
       ADMIN-MANAGED / SERVER-ONLY DOCS
       ========================================================= */
    // These are never read/written by clients; APIs (Admin SDK) gate access.
    match /questionnaires/{qid} {
      allow read, write: if false;
    }
    match /questionnaireAssignments/{aid} {
      allow read, write: if false;
    }

    // Infra collections
    match /loginEvents/{eventId} {
      allow read, write: if false;
    }
    match /idempotentWrites/{id} {
      allow read, write: if false;
    }
    match /adminAuditLogs/{logId} {
      allow read, write: if false;
    }

    /* ---------- Catch-all deny ---------- */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
